/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'

const IndexLazyRouteImport = createFileRoute('/')()
const DashboardIndexLazyRouteImport = createFileRoute('/dashboard/')()
const DashboardVehiclesLazyRouteImport = createFileRoute(
  '/dashboard/vehicles',
)()
const DashboardNewsLazyRouteImport = createFileRoute('/dashboard/news')()
const DashboardLaunchesLazyRouteImport = createFileRoute(
  '/dashboard/launches',
)()
const DashboardEventsLazyRouteImport = createFileRoute('/dashboard/events')()

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const DashboardIndexLazyRoute = DashboardIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any).lazy(() =>
  import('./routes/dashboard/index.lazy').then((d) => d.Route),
)
const DashboardVehiclesLazyRoute = DashboardVehiclesLazyRouteImport.update({
  id: '/vehicles',
  path: '/vehicles',
  getParentRoute: () => DashboardRouteRoute,
} as any).lazy(() =>
  import('./routes/dashboard/vehicles.lazy').then((d) => d.Route),
)
const DashboardNewsLazyRoute = DashboardNewsLazyRouteImport.update({
  id: '/news',
  path: '/news',
  getParentRoute: () => DashboardRouteRoute,
} as any).lazy(() =>
  import('./routes/dashboard/news.lazy').then((d) => d.Route),
)
const DashboardLaunchesLazyRoute = DashboardLaunchesLazyRouteImport.update({
  id: '/launches',
  path: '/launches',
  getParentRoute: () => DashboardRouteRoute,
} as any).lazy(() =>
  import('./routes/dashboard/launches.lazy').then((d) => d.Route),
)
const DashboardEventsLazyRoute = DashboardEventsLazyRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => DashboardRouteRoute,
} as any).lazy(() =>
  import('./routes/dashboard/events.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/events': typeof DashboardEventsLazyRoute
  '/dashboard/launches': typeof DashboardLaunchesLazyRoute
  '/dashboard/news': typeof DashboardNewsLazyRoute
  '/dashboard/vehicles': typeof DashboardVehiclesLazyRoute
  '/dashboard/': typeof DashboardIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/dashboard/events': typeof DashboardEventsLazyRoute
  '/dashboard/launches': typeof DashboardLaunchesLazyRoute
  '/dashboard/news': typeof DashboardNewsLazyRoute
  '/dashboard/vehicles': typeof DashboardVehiclesLazyRoute
  '/dashboard': typeof DashboardIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/events': typeof DashboardEventsLazyRoute
  '/dashboard/launches': typeof DashboardLaunchesLazyRoute
  '/dashboard/news': typeof DashboardNewsLazyRoute
  '/dashboard/vehicles': typeof DashboardVehiclesLazyRoute
  '/dashboard/': typeof DashboardIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/events'
    | '/dashboard/launches'
    | '/dashboard/news'
    | '/dashboard/vehicles'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/events'
    | '/dashboard/launches'
    | '/dashboard/news'
    | '/dashboard/vehicles'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/events'
    | '/dashboard/launches'
    | '/dashboard/news'
    | '/dashboard/vehicles'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexLazyRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/vehicles': {
      id: '/dashboard/vehicles'
      path: '/vehicles'
      fullPath: '/dashboard/vehicles'
      preLoaderRoute: typeof DashboardVehiclesLazyRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/news': {
      id: '/dashboard/news'
      path: '/news'
      fullPath: '/dashboard/news'
      preLoaderRoute: typeof DashboardNewsLazyRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/launches': {
      id: '/dashboard/launches'
      path: '/launches'
      fullPath: '/dashboard/launches'
      preLoaderRoute: typeof DashboardLaunchesLazyRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/events': {
      id: '/dashboard/events'
      path: '/events'
      fullPath: '/dashboard/events'
      preLoaderRoute: typeof DashboardEventsLazyRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardEventsLazyRoute: typeof DashboardEventsLazyRoute
  DashboardLaunchesLazyRoute: typeof DashboardLaunchesLazyRoute
  DashboardNewsLazyRoute: typeof DashboardNewsLazyRoute
  DashboardVehiclesLazyRoute: typeof DashboardVehiclesLazyRoute
  DashboardIndexLazyRoute: typeof DashboardIndexLazyRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardEventsLazyRoute: DashboardEventsLazyRoute,
  DashboardLaunchesLazyRoute: DashboardLaunchesLazyRoute,
  DashboardNewsLazyRoute: DashboardNewsLazyRoute,
  DashboardVehiclesLazyRoute: DashboardVehiclesLazyRoute,
  DashboardIndexLazyRoute: DashboardIndexLazyRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
